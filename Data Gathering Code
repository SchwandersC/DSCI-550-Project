{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyO+Ns71Aw+2I5g0ycnIYrdm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["**The Following function and code processes the output of the api call into a dataframe and exported into a csv**"],"metadata":{"id":"1IKwCCEjbh3M"}},{"cell_type":"code","source":["import csv\n","from datetime import datetime as dt\n","\n","\n","\n","def process_comments(response_items, csv_output=False):\n","    today = dt.today().strftime('%d-%m-%Y')\n","    comments = []\n","\n","\n","    for res in response_items:\n","\n","        # loop through the replies\n","        if 'replies' in res.keys():\n","            for reply in res['replies']['comments']:\n","                comment = reply['snippet']\n","                comment['commentId'] = reply['id']\n","                comments.append(comment)\n","        else:\n","            comment = {}\n","            comment['snippet'] = res['snippet']['topLevelComment']['snippet']\n","            comment['snippet']['parentId'] = None\n","            comment['snippet']['commentId'] = res['snippet']['topLevelComment']['id']\n","\n","            comments.append(comment['snippet'])\n","\n","    if csv_output:\n","         make_csv(comments)\n","\n","    print(f'Finished processing {len(comments)} comments.')\n","    return comments\n","\n","\n","def make_csv(comments, channelID=None):\n","    header = comments[0].keys()\n","\n","    if channelID:\n","        filename = f'comments_{channelID}_{today}.csv'\n","    else:\n","        filename = f'comments_{today}.csv'\n","\n","    with open(filename, 'w', encoding='utf8', newline='') as f:\n","        writer = csv.DictWriter(f, fieldnames=header, extrasaction='ignore')\n","        writer.writeheader()\n","        writer.writerows(comments)"],"metadata":{"id":"VxFxmY3sbcw8"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**The Folowing Code acesses the youtube api to extract comment threads for a given video id**"],"metadata":{"id":"5TKu6aJCbzuS"}},{"cell_type":"code","source":["def comment_threads(videoID, to_csv=True):\n","\n","    comments_list = []\n","\n","    request = youtube.commentThreads().list(\n","        part='id,replies,snippet',\n","        videoId=videoID,\n","    )\n","\n","    response = request.execute()\n","    comments_list.extend(process_comments(response['items']))\n","\n","    # if there is nextPageToken, then keep calling the API\n","    while response.get('nextPageToken', None):\n","        request = youtube.commentThreads().list(\n","            part='id,replies,snippet',\n","            videoId=videoID,\n","            pageToken=response['nextPageToken']\n","        )\n","        response = request.execute()\n","        comments_list.extend(process_comments(response['items']))\n","\n","    comments_list = list(unique_everseen(comments_list))\n","\n","    print(f\"Finished fetching comments for {videoID}. {len(comments_list)} comments found.\")\n","\n","    if to_csv:\n","        make_csv(comments_list, videoID)\n","\n","    return comments_list"],"metadata":{"id":"s_jWEIOMmCCX"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**This shows setting up the youtube api environment to be used**"],"metadata":{"id":"OjiHJ_Sxb-FH"}},{"cell_type":"code","source":["import os\n","from dotenv import load_dotenv\n","from googleapiclient.discovery import build\n","from iteration_utilities import unique_everseen\n","import pandas as pd\n","\n","#use your key. un comment the one under your name\n","#--Charlie\n","#key = \"AIzaSyBnjKHCLWm6-pZ8CePwciQMbcaElkXR7rk\"\n","#--Chris\n","#key = \"AIzaSyCQpS2t83RiX459a39g7g0dJm7CI5mz23I\"\n","#--Cici\n","#key = \"AIzaSyDKY84w0ueBkFA4SVBVajl65GJ3RurrS6o\"\n","#JZ\n","#key = \"AIzaSyDfTlkWKDBt5HlmPC6MVYvXZAHMAz3c4eg\"\n","\n","\n","\n","youtube = build(\"youtube\", \"v3\", developerKey=\"AIzaSyBnjKHCLWm6-pZ8CePwciQMbcaElkXR7rk\")\n"],"metadata":{"id":"7lf6zEFYmGfw"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Checking to make sure the api works**"],"metadata":{"id":"DQ2Wu1IYcGrb"}},{"cell_type":"code","source":["cols = ['channelId', 'videoId', 'textDisplay', 'textOriginal', 'parentId', 'authorDisplayName', 'authorProfileImageUrl', 'authorChannelUrl', 'canRate', 'viewerRating', 'likeCount', 'publishedAt', 'updatedAt', 'commentId']\n","comment_df = pd.DataFrame(columns = cols )\n","\n","\n","\n","video_ids = ['TN9ujnma8Ko','5SZ2xS_2HjE']\n","\n","for vid in video_ids:\n","    response = comment_threads(videoID=vid, to_csv=True)\n","\n","    for comment in response:\n","        if 'authorChannelID' in comment.keys():\n","            del comment['authorChannelId']\n","        comment_df = comment_df.append(comment, ignore_index= True)"],"metadata":{"id":"laUCWioYmKt-"},"execution_count":null,"outputs":[]}]}